#!/usr/bin/env python3
# This file is placed in the Public Domain.

__version__ = 41

import os, sys ; sys.path.insert(0, os.getcwd())

import os
import readline
import sys
import termios
import threading
import time

from gcd.clt import Client
from gcd.obj import Cfg, Object, keys
from gcd.ofn import fmt
from gcd.run import Runtime
from gcd.tbl import Table
from gcd.tms import elapsed
from gcd.run import Cfg as RunCfg
from gcd.utl import spl

Cfg.wd = os.path.expanduser("~/.genocide")


class Console(Client):

    def handle(self, clt, e):
        k.put(e)
        e.wait()

    def poll(self):
        return input("> ")

    def raw(self, txt):
        print(txt)
        sys.stdout.flush()


class Kernel(Runtime):

    @staticmethod
    def error(txt):
        print(txt)
        sys.stdout.flush()

    @staticmethod
    def log(txt):
        if "PONG" in txt or "PING" in txt:
            return
        if RunCfg.verbose:
            print(txt.rstrip())
            sys.stdout.flush()

def daemon():
    pid = os.fork()
    if pid != 0:
        termreset()
        os._exit(0)
    os.setsid()
    os.umask(0)
    si = open("/dev/null", 'r')
    so = open("/dev/null", 'a+')
    se = open("/dev/null", 'a+')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())


clt = Console()
k = Kernel()


import genocide.all

def wrap(func):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        func()
    except KeyboardInterrupt:
        print("")
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)


def cmd(event):
    event.reply(",".join(sorted(list(Table.modnames))))


def main():
    if k.root():
        print("don't run this bot as root")
        return
    Runtime.cfg.name = "genocide"
    Runtime.cfg.version = __version__
    k.parse_cli()
    Table.add(cmd)
    if k.cfg.verbose:
        k.log("GENOCIDE %s starting at %s" % (__version__, time.ctime(time.time())))
        k.log(",".join(sorted(list(Table.modnames))))
        k.log(fmt(k.cfg, ["console", "daemon", "debug", "systemd", "verbose"]))
    if k.prs.txt:
        return k.cmd(clt, k.prs.otxt)
    if RunCfg.daemon:
        daemon()
    if RunCfg.console or "mod" in k.cfg:
        k.start()
        for mn in spl(k.cfg.mod):
            k.init("genocide.%s" % mn)
        k.log("booted")
        clt.start()
        k.wait()


wrap(main)
