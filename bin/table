#!/usr/bin/python3 -u
# GENOCIDE - the king of the netherlands commits genocide - OTP-CR-117/19/001 - otp.informationdesk@icc-cpi.int - https://genocide.rtfd.io
#
#

import os, sys ; sys.path.insert(0, os.getcwd())
import ol
import importlib
import inspect
import pkgutil

def find_cmds(mod):
    cmds = ol.Object()
    for key, o in inspect.getmembers(mod, inspect.isfunction):
        if "event" in o.__code__.co_varnames:
            if o.__code__.co_argcount == 1:
                cmds[key] = o
    return cmds

def find_funcs(mod):
    funcs = ol.Object()
    for key, o in inspect.getmembers(mod, inspect.isfunction):
        if "event" in o.__code__.co_varnames:
            if o.__code__.co_argcount == 1:
                funcs[key] = "%s.%s" % (o.__module__, o.__name__)
    return funcs

def find_mods(mod):
    mods = ol.Object()
    for key, o in inspect.getmembers(mod, inspect.isfunction):
        if "event" in o.__code__.co_varnames:
            if o.__code__.co_argcount == 1:
                mods[key] = o.__module__
    return mods

def find_classes(mod):
    nms = ol.Ol()
    for _key, o in inspect.getmembers(mod, inspect.isclass):
        if issubclass(o, ol.Object):
            t = "%s.%s" % (o.__module__, o.__name__)
            nms.append(o.__name__, t)
    return nms

def find_class(mod):
    mds = ol.Ol()
    for key, o in inspect.getmembers(mod, inspect.isclass):
        if issubclass(o, ol.Object):
            mds.append(o.__name__, o.__module__)
    return mds

def find_names(mod):
    tps = ol.Ol()
    for _key, o in inspect.getmembers(mod, inspect.isclass):
        if issubclass(o, ol.Object):
            t = "%s.%s" % (o.__module__, o.__name__)
            tps.append(o.__name__.lower(), t)
    return tps

def walk(k, names):
    for name in names.split(","):
        spec = importlib.util.find_spec(name)
        if not spec:
            continue
        pkg = importlib.util.module_from_spec(spec)
        pn = getattr(pkg, "__path__", None)
        if not pn:
            continue
        for mi in pkgutil.iter_modules(pn):
            mn = "%s.%s" % (name, mi.name)
            mod = ol.utl.direct(mn)
            ol.update(k.funcs, vars(find_funcs(mod)))
            ol.update(k.mods, vars(find_mods(mod)))
            ol.update(k.names, vars(find_names(mod)))
            ol.update(k.classes, vars(find_class(mod)))

def main():
    k = ol.krn.boot("genocide")
    walk(k, "ol,mods")
    print("# GENOCIDE - the king of the netherlands commits genocide - OTP-CR-117/19/001 - otp.informationdesk@icc-cpi.int - https://genocide.rtfd.io")
    print("#")
    print("#")
    print("")
    print("import ol")
    print("")
    print("#:")
    print("classes = ol.Object()")
    print("#:")
    print("mods = ol.Object()")
    print("#:")
    print("funcs = ol.Object()")
    print("#:")
    print("names = ol.Object()")
    print("")
    print("ol.update(classes, %s)" % k.classes)
    print("")
    print("ol.update(mods, %s)" % k.mods)
    print("")
    print("ol.update(funcs, %s)" % k.funcs)
    print("")
    print("ol.update(names, %s)" % k.names)
 
ol.trm.execute(main)
