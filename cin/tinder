#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C0115,C0116,W0603,C0413,E0401,C0103


"tinder"


import os
import shutil
import sys
import termios
import time
import traceback
import _thread


sys.path.insert(0, os.getcwd())


import genocide.modules


from genocide.clocked import elapsed
from genocide.objects import Default, Object, update
from genocide.persist import Persist
from genocide.handler import Client, Command, Error, parse
from genocide.scanner import scandir, scanpkg, importer
from genocide.threads import launch


Persist.workdir = ".test"


Cfg = Default()
Cfg.debug = True
Cfg.name = "tinder"


SKIP = ["debug",]


date = time.ctime(time.time()).replace("  ", " ")
paylock = _thread.allocate_lock()
starttime = time.time()


errors = []
events = []
result = 1


param = Object()
param.add = ["test@shell", "bart", ""]
param.cfg = ["server=localhost", ""]
param.dne = ["test4", ""]
param.rem = ["reddit", ""]
param.dpl = ["reddit title,summary,link", ""]
param.flt = ["0", ""]
param.fnd = [
             "cfg",
             "tdo",
             "rss",
             "tdo txt==test",
             "cfg server==localhost",
             "rss rss==reddit"
            ]
param.log = ["test1", ""]
param.nme = ["reddit reddit"]
param.dpl = ["reddit title,link"]
param.rem = ["reddit"]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.tdo = ["test4", ""]
param.thr = [""]


class CLI(Client):

    @staticmethod
    def announce(txt):
        CLI.raw(txt)

    @staticmethod
    def raw(txt):
        if txt and "v" in Cfg.opts:
            print(txt)
            sys.stdout.flush()


def consume(evts):
    fixed = []
    res = []
    for evt in evts:
        res.append(evt.wait())
        fixed.append(evt)
    for fff in fixed:
        try:
            evts.remove(fff)
        except ValueError:
            continue
    return res


def payload(clt):
    with paylock:
        nmr = 0
        for cmnd in sorted(Command.cmds):
            for ex in getattr(param, cmnd, [""]):
                evt = clt.event(cmnd + " " + ex)
                evt.orig = repr(clt)
                clt.put(evt)
                events.append(evt)
                nmr += 1
        return nmr


def waiter():
    got = []
    for ex in Error.errors:
        traceback.print_exception(type(ex), ex, ex.__traceback__)
        got.append(ex)
    for exc in got:
        Error.errors.remove(exc)


def wrap(func):
    old = termios.tcgetattr(sys.stdin.fileno())
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
        sys.stdout.flush()
    finally:
        termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)
        waiter()


def main():
    global result
    print(f"TINDER started {date}")
    if os.path.exists(Persist.workdir):
        shutil.rmtree(Persist.workdir)
    cfg = parse(" ".join(sys.argv[1:]))
    update(Cfg, cfg)
    Cfg.debug = True
    nrs = Cfg.index or 1
    waiters = []
    cli = CLI()
    cli.start()
    for mod in scanpkg(genocide.modules, importer, doall=True):
        mod.debug = True
    for mod in scandir("modules", importer, doall=True):
        mod.debug = True
    for _nr in range(nrs):
        waiters.append(launch(payload, cli, name=_nr))
    for wtr in waiters:
        result += wtr.join() or 1
    consume(events)
    endtime = time.time()
    print("%s %s %s" %  (
                         elapsed(endtime - starttime),
                         result,
                         (endtime - starttime)/result)
                        )


wrap(main)
waiter()
