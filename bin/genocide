#!/usr/bin/env python3
# This file is placed in the Public Domain.


"Prosecutor. Court. Reconsider OTP-CR-117/19."


import os
import readline
import sys
import termios
import time
import traceback


sys.path.insert(0, os.getcwd())


from genocide.object import Config


Config.name = "genocide"
Config.threaded = False
Config.version = "72"
Config.workdir = os.path.expanduser("~/.genocide")


from genocide.irc import Config as IConfig


IConfig.cc = "!"
IConfig.channel = "#genocide"
IConfig.nick = "genocide"
IConfig.password = ""
IConfig.port = 6667
IConfig.realname = "Prosecutor. Court. Reconsider OTP-CR-117/19."
IConfig.sasl = False
IConfig.server = "localhost"
IConfig.servermodes = ""
IConfig.sleep = 60
IConfig.username = "genocide"
IConfig.users = False


from genocide.object import Class, Db, Object
from genocide.object import cdir, find, fntime, format, get, items, save, spl, update
from genocide.handler import Callbacks, CLI, Console, Event, Table, dispatch, starttime
from genocide.irc import IRC
from genocide.model import init as ginit
from genocide.rss import Fetcher


import genocide.all


class CLI(CLI):

    def raw(self, txt):
        print(txt)


class Console(Console):

    def raw(self, txt):
        print(txt)


def boot():
    e = Event()
    e.parse(" ".join(sys.argv[1:]))
    for k, v in items(e):
        setattr(Config, k, v)
    for o in Config.opts:
        if o == "-v":
           Config.verbose = True 
    return e


def init(mns, pn="genocide"):
    for mn in spl(mns):
        mod = Table.get("%s.%s" % (pn, mn))
        if mod:
            try:
                mod.init()
            except Exception as ex:
                Callbacks.errors.append(ex)


def register(mns, pn="genocide"):
    for mn in spl(mns):
        mod = Table.get("%s.%s" % (pn, mn))
        if mod:
            try:
                mod.register()
            except Exception as ex:
                Callbacks.errors.append(ex)


def wait():
    while 1:
        time.sleep(1.0)
        for err in Callbacks.errors:
            traceback.print_exception(type(err), err, err.__traceback__)


def wrap(func):
    fd = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fd)
    except termios.error:
        gotterm = False
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fd, termios.TCSADRAIN, old)
            for err in Callbacks.errors:
                traceback.print_exception(type(err), err, err.__traceback__)

def main():
    boot()
    cdir(Config.workdir)
    register("irc,rss")
    if len(sys.argv) > 1:
        c = CLI()
        return c.cmd(" ".join(sys.argv[1:]))
    print("GENOCIDE shell started at %s" % time.ctime(starttime).replace("  ", " "))
    print(format(Config, skip="password"))
    init("irc,rss")
    ginit()
    c = Console()
    c.start()
    wait()


wrap(main)
