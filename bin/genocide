#!/usr/bin/env python3
# This file is placed in the Public Domain.

__version__ = 41

import atexit
import os
import readline
import sys
import termios

sys.path.insert(0, os.getcwd())

from gcd.bus import first
from gcd.clt import Client
from gcd.evt import Event
from gcd.krn import Kernel, kcmd
from gcd.obj import cfg

import gcd.all
import genocide.all

all = "adm,cms,fnd,irc,krn,log,rss,slg,sts,tdo,udp"
name = "genocide"
resume = {}

def termsetup(fd):
    return termios.tcgetattr(fd)

def termreset():
    if "old" in resume:
        try:
            termios.tcsetattr(resume["fd"], termios.TCSADRAIN, resume["old"])
        except termios.error:
            pass

def termsave():
    try:
        resume["fd"] = sys.stdin.fileno()
        resume["old"] = termsetup(sys.stdin.fileno())
        atexit.register(termreset)
    except termios.error:
        pass

class CLI(Client):

    def raw(self, txt):
        print(txt)

    def start(self):
        super().start()
        self.initialize(kcmd)

class Console(CLI):

    def handle(self, e):
        super().handle(e)
        e.wait()

    def poll(self):
        return input("> ")

def rse(event):
    c = first()
    c.restart()

def ver(event):
    event.reply("%s %s" % (name.upper(), __version__))

def main():
    cfg.wd = os.path.expanduser("~/.%s" % name.lower())
    k = Kernel()
    k.addcmd(rse)
    k.addcmd(ver)
    k.boot(name, all)
    if k.cfg.txt:
        c = CLI()
        c.initialize()
        e = c.event(k.cfg.otxt)
        kcmd(c, e)
        e.wait()
        return 
    c = Client()
    k.init(k.cfg.mods)
    if k.opts("c"):
        c = Console()
    if k.opts("cd"):
        c.start()
        c.wait()

def exec(main):
    termsave()
    try:
         main()
    except KeyboardInterrupt:
        pass
    finally:
        termreset()

exec(main)
