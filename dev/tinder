#!/usr/bin/env python3
# This file is placed in the Public Domain.


import inspect
import os
import random
import shutil
import sys
import termios
import time
import unittest
import _thread


sys.path.insert(0, os.getcwd())


import op.obj


op.obj.workdir = ".tinder"


from op.run import Config


Config.debug = True
Config.name = "heks"
Config.verbose = True
Config.workdir = ".test"


from op.bus import Bus
from op.run import Commands, dispatch
from op.evt import Command, Event
from op.dbs import Class, find, fntime, last, listfiles, locked
from op.obj import Object, edit, format, get, items, keys, save, values, update
from op.hdl import Callbacks, Handler
from op.run import Table, parse_cli, starttime
from op.thr import Thread, getname, launch
from op.utl import cdir


from genocide import bsc,fnd, irc, log, mdl, rss, sts, tdo


Table.add(fnd)
Table.add(irc)
Table.add(log)
Table.add(mdl)
Table.add(rss)
Table.add(sts)
Table.add(tdo)


allmod =  ",".join(keys(Table.mod))


param = Object()
param.cfg = ["server=localhost", ""]
param.cor = ["bthate@dds.nl"]
param.dlt = ["user@shell"]
param.dne = ["test4", ""]
param.rem = ["reddit", ""]
param.dpl = ["reddit title,summary,link", ""]
param.log = ["test1", ""]
param.mbx = ["~/25-1-2013"]
param.met = ["user@shell"]
param.mre = ["4", ""]
param.nme = ["hnrss hacker news"]
param.flt = ["0", ""]
param.fnd = ["email From==bthate", "user", "todo", "cfg", "log", "rss", "log txt==test", "cfg server==localhost", "rss rss==reddit"]
param.pwd = ["bart klokje"]
param.rem = ["user@test"]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.tdo = ["test4", ""]


errors = []
events = []
payloadlock = _thread.allocate_lock()
results = []


class CLI(Handler):

     def raw(self, txt):
         if Config.verbose:
             print(txt)
        
         
def consume(events):
    fixed = []
    res = []
    for e in events:
        e.wait()
        fixed.append(e)
    for f in fixed:
        try:
            events.remove(f)
        except ValueError:
            continue
    return res


def elapsed(seconds, short=True):
    txt = ""
    nsec = float(seconds)
    year = 365*24*60*60
    week = 7*24*60*60
    nday = 24*60*60
    hour = 60*60
    minute = 60
    years = int(nsec/year)
    nsec -= years*year
    weeks = int(nsec/week)
    nsec -= weeks*week
    nrdays = int(nsec/nday)
    nsec -= nrdays*nday
    hours = int(nsec/hour)
    nsec -= hours*hour
    minutes = int(nsec/minute)
    sec = nsec - minutes*minute
    if years:
        txt += "%sy" % years
    if weeks:
        nrdays += weeks * 7
    if nrdays:
        txt += "%sd" % nrdays
    if years and short and txt:
        return txt
    if hours:
        txt += "%sh" % hours
    if nrdays and short and txt:
        return txt
    if minutes:
        txt += "%sm" % minutes
    if hours and short and txt:
        return txt
    if sec == 0:
        txt += "0s"
    else:
        txt += "%ss" % int(sec)
    txt = txt.strip()
    return txt


@locked(payloadlock)
def payload(c):
    global events
    cmds = sorted(Commands.cmd)
    cdir(op.obj.workdir)
    for cmd in cmds:
        for ex in get(param, cmd, [""]):
            e = Command()
            e.channel = "#hx"
            e.txt = cmd + " " + ex
            e.orig = repr(c)
            c.put(e)
            events.append(e)
    consume(events)
    if os.path.exists(op.obj.workdir):
        shutil.rmtree(op.obj.workdir)


def wrap(func):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)
        print("\n%s events left (%s)" % (len(events), elapsed(time.time()-starttime)))


def main():
    cfg = parse_cli(" ".join(sys.argv[1:]))
    Table.scan()
    c = CLI()
    c.start()
    thrs = []
    nrs = cfg.index or 20
    for nr in range(nrs):
        thr = launch(payload, c)
        thr.join()


wrap(main)
