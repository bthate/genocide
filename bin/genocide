#!/usr/bin/env python3
# This file is placed in the Public Domain.


"Prosecutor. Court. Reconsider OTP-CR-117/19."


__version__ = "73"


import os
import readline
import sys
import termios
import time
import traceback


sys.path.insert(0, os.getcwd())


from genocide.obj import Config


Config.name = "genocide"
Config.threaded = False
Config.version = __version__
Config.workdir = os.path.expanduser("~/.genocide")


from genocide.irc import Config as IConfig


IConfig.realname = "Prosecutor. Court. Reconsider OTP-CR-117/19."

from genocide.obj import Class, Db, Object
from genocide.obj import cdir, find, fntime, format, get, items, save, spl, update
from genocide.hdl import Callbacks, CLI, Commands, Console, Event, Handler, Table
from genocide.hdl import getname, starttime


import genocide.basic 
import genocide.irc
import genocide.model
import genocide.rss


Table.add(genocide.basic)
Table.add(genocide.irc)
Table.add(genocide.model)
Table.add(genocide.rss)


class CLI(CLI):

    def raw(self, txt):
        print(txt)


class Console(Console):

    def announce(self, txt):
        pass

    def raw(self, txt):
        print(txt)


def from_exception(ex, catch=None):
    result = []
    for fr in traceback.extract_tb(ex.__traceback__):
        fnc = str(fr).split()[-1][:-1]
        nme = os.sep.join(fr.filename.split(os.sep)[-2:])
        if catch and catch not in nme:
            continue
        result.append("%s %s.%s" % (nme, fnc, fr.lineno))
    return "\n%s -> %s %s" % (" -> ".join(result), getname(ex), ex)



def boot(txt):
    e = Event()
    e.parse(txt)
    for k, v in items(e):
        setattr(Config, k, v)
    for o in Config.opts:
        if o == "-v":
           Config.verbose = True 
    return e


def init(mns, pn=None, cmds="init"):
    for mn in spl(mns):
        if pn:
            mn = pn + "." + mn
        mod = Table.get(mn)
        if not mod:
            continue
        for cmd in spl(cmds):
            c = getattr(mod, cmd, None)
            if not c:
                continue
            try:
                c()
            except Exception as ex:
                Callbacks.errors.append(ex)


def isopt(opts):
    for o in opts:
        if o in Config.opts:
            return True


def wait():
    while 1:
        time.sleep(1.0)
        for err in Callbacks.errors:
            print(from_exception(err, Config.name))
            Callbacks.errors.remove(err)


def wrap(func):
    fd = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fd)
    except termios.error:
        gotterm = False
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fd, termios.TCSADRAIN, old)
            for err in Callbacks.errors:
                traceback.print_exception(type(err), err, err.__traceback__)


def main():
    boot(" ".join(sys.argv[1:]))
    cdir(Config.workdir)
    if len(sys.argv) > 1:
        init("basic,irc,model,rss", Config.name, "reg")
        c = CLI()
        return c.cmd(" ".join(sys.argv[1:]))
    print("%s shell started at %s" % (Config.name.upper(), time.ctime(starttime).replace("  ", " ")))
    init("basic,irc,model,rss", "genocide", "reg")
    init("irc,model,rss", "genocide")
    print(format(Config, skip="password,type"))
    c = Console()
    c.start()
    wait()


wrap(main)
