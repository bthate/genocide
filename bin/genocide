#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C0103,C0115,C0116,C0413,W0212,C0301,W0613,E0611,E0401


"reconsider OTP-CR-117/19"


## imports


import atexit
import importlib
import importlib.util
import inspect
import os
import readline
import rlcompleter
import sys
import shutil
import time
import termios
import traceback


sys.path.insert(0, os.getcwd())


from genocide import Cfg, Command, Event, Handler, User, Wd
from genocide import Wd, cdir, edit, find, keys, last, printable, save, write
from genocide import elapsed, fntime, launch, match
from genocide import boot, command, scandir, scanpkg, wait


import genocide
import genocide.mod


## defines


Cfg.banner = "reconsider OTP-CR-117/19"
Cfg.name = "genocide"
Cfg.version = "91"


Wd.workdir = os.path.expanduser("~/.genocide")


date = time.ctime(time.time()).replace("  ", " ")


## classes


class CLI(Handler):

    @staticmethod
    def announce(txt):
        pass

    @staticmethod
    def raw(txt):
        print(txt)
        sys.stdout.flush()


class Console(Handler):

    @staticmethod
    def announce(txt):
        pass

    @staticmethod
    def handle(event):
        Command.handle(event)
        event.wait()

    def poll(self):
        event = Event()
        event.txt = input("> ")
        event.orig = repr(self)
        return event

    @staticmethod
    def raw(txt):
        print(txt)
        sys.stdout.flush()


class Completer(rlcompleter.Completer):

    def __init__(self, options):
        rlcompleter.Completer.__init__(self)
        self.matches = []
        self.options = options

    def complete(self, text, state):
        if state == 0:
            if text:
                self.matches = [
                                s for s in self.options
                                if s and s.startswith(text)
                               ]
            else:
                self.matches = self.options[:]
        try:
            return self.matches[state]
        except IndexError:
            return None


## utilities


def daemon():
    pid = os.fork()
    if pid != 0:
        os._exit(0)
    os.setsid()
    os.umask(0)
    sis = open("/dev/null", 'r')
    os.dup2(sis.fileno(), sys.stdin.fileno())
    if not Cfg.verbose:
        sos = open("/dev/null", 'a+')
        ses = open("/dev/null", 'a+')
        os.dup2(sos.fileno(), sys.stdout.fileno())
        os.dup2(ses.fileno(), sys.stderr.fileno())


def importer(mname, path=None):
    if path is None:
        spec = importlib.util.find_spec(mname)
    else:
        spec = importlib.util.spec_from_file_location(mname, path)
    if spec:
        mods = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(mods)
        return mods
    return None


def initer(mname, path=None):
    mods = importer(mname, path)
    if mods and "init" in dir(mods):
        thr = launch(mods.init)
        thr.join()
    scan(mods)


def scan(mod):
    for key, cmd in inspect.getmembers(mod, inspect.isfunction):
        if key.startswith("cb"):
            continue
        names = cmd.__code__.co_varnames
        if "event" in names:
            Command.add(cmd)


def scanner(mname, path=None):
    mods = importer(mname, path)
    scan(mods)


def print_exc(ex):
    traceback.print_exception(type(ex), ex, ex.__traceback__)


def setcompleter(optionlist):
    completer = Completer(optionlist)
    readline.set_completer(completer.complete)
    readline.parse_and_bind("tab: complete")
    atexit.register(lambda: readline.set_completer(None))


def wrap(func):
    fds = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fds)
    except termios.error:
        gotterm = False
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fds, termios.TCSADRAIN, old)
        for evt in Command.errors:
            print_exc(evt.__exc__)


## commands

def dis(event):
    if not event.args:
        event.reply("dis <modname>")
        return
    name = event.args[0]
    if name == "disable":
        event.reply("i won't disable myself")
        return
    name += ".py"
    gcp = genocide.mod.__path__[0]
    path = os.path.join(gcp, name)
    if not os.path.exists(path):
        event.reply("can't find %s to disable" % name)
        return
    nmd = os.path.join(gcp, "notmod")
    cdir(nmd)
    dest = os.path.join(nmd, name)
    shutil.move(path, dest)
    event.ok()


def ena(event):
    if not event.args:
        event.reply("enable <modname>")
        return
    name = event.args[0]
    if name == "enable":
        event.reply("i won't enable myself")
        return
    name += ".py"
    gcp = genocide.__path__[0]
    path = os.path.join(gcp, "notmod", name)
    if not os.path.exists(path):
        event.reply("missing %s" % name)
        return
    dest = os.path.join(Wd.moddir(), name)
    shutil.move(path, dest)
    event.ok()

## runtime


def main():
    boot(" ".join(sys.argv[1:]))
    scanpkg(genocide.mod, scanner)
    if Cfg.prs.txt:
        Command.add(dis)
        Command.add(ena)
        cli = CLI()
        return command(cli, Cfg.prs.otxt)
    if Cfg.daemon:
        daemon()
        Cfg.wait = True
    if Cfg.console:
        print("%s started at %s %s" % (
                                       Cfg.name.upper(),
                                       date,
                                       printable(
                                                 Cfg,
                                                 skip="banner,name",
                                                 plain=True)
                                                )
                                      )
        setcompleter(Command.cmd)
        cli = Console()
        launch(cli.start)
        Cfg.wait = True
    if Cfg.wait:
        scanpkg(genocide.mod, initer)
    if Cfg.wait:
        wait()


wrap(main)
