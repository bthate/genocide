#!/usr/bin/env python3
# This file is placed in the Public Domain.


import inspect
import os
import random
import shutil
import sys
import termios
import time
import traceback
import unittest


sys.path.insert(0, os.getcwd())
sys.path.insert(0, "lib")


from obs import Bus
from ocb import Callback
from ocl import Class
from ocm import Command
from oev import Event
from odb import find, fntime, last, listfiles, save
from obj import Object, get, items, keys, values, update
from ofn import edit, format
from ohd import Handler
from okr import Config, boot
from opr import aliases, elapsed, parse
from otb import Table
from oth import Thread, getname, launch


Config.workdir = ".test"


errors = []
events = []
param = Object()
param.add = ["test@shell", "bart", ""]
param.cfg = ["server=localhost", ""]
param.dne = ["test4", ""]
param.rem = ["reddit", ""]
param.dpl = ["reddit title,summary,link", ""]
param.log = ["test1", ""]
param.flt = ["0", ""]
param.fnd = ["cfg", "log", "rss", "log txt==test", "cfg server==localhost", "rss rss==reddit"]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.tdo = ["test4", ""]
results = []
starttime = time.time()


def cprint(txt):
    print(txt)
    sys.stdout.flush()


class CLI(Handler):

     def __init__(self):
         Handler.__init__(self)

     def raw(self, txt):
         if Config.verbose:
             cprint(txt)
        
         
def consume(events):
    fixed = []
    res = []
    for e in events:
        e.wait()
        fixed.append(e)
    for f in fixed:
        try:
            events.remove(f)
        except ValueError:
            continue
    return res


def from_exception(ex, txt="", sep=" "):
    result = []
    for fr in traceback.extract_tb(ex.__traceback__):
        result.append("%s:%s" % (os.sep.join(fr.filename.split(os.sep)[-2:]), fr.lineno))
    return "%s(%s) %s" % (getname(ex), ex, " ".join(result))


def payload(c):
    global events
    cmds = sorted(Command.cmd)
    random.shuffle(cmds)
    for cmd in cmds:
        for ex in get(param, cmd, [""]):
            e = Event()
            e.txt = cmd + " " + ex
            e.orig = repr(c)
            try:
                c.handle(e)
            except Raise:
                pass
            events.append(e)
    for cmd in keys(aliases):
        for ex in get(param, cmd, [""]):
            e = Event()
            e.txt = cmd + " " + ex
            e.orig = repr(c)
            try:
                c.handle(e)
            except Raise:
                pass
            events.append(e)

def wrap(func):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        cprint("")
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)
    if errors:
        cprint("\nthere are errors\n")
        for err in errors:
            traceback.print_exception(type(err), err, err.__traceback__)
    cprint("\n%s events left (%s)" % (len(events), elapsed(time.time()-starttime)))


def main():
    cprint("GENOCIDE tinder start at %s" % time.ctime(time.time()).replace("  ", " "))
    if os.path.exists(".test"):
        shutil.rmtree(".test")
    if os.path.exists(Config.workdir):
        shutil.rmtree(Config.workdir)
    boot(" ".join(sys.argv[1:]))
    Config.debug = True
    cprint(format(Config, "debug,verbose,index,workdir"))
    c = CLI()
    c.start()
    c.threaded = True
    thrs = []
    nrs = Config.index or 20
    for nr in range(nrs):
        launch(payload, c)
    consume(events)


wrap(main)
