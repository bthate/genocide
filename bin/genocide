#!/usr/bin/python3
# GENOCIDE - One decision from a judge that it is after 2002 (bin/genocide)
#
# this file is placed in the public domain

"""GENOCIDE(1)			   User Commands 			 GENOCIDE(1)

NAME
        GENOCIDE - using the law to administer poison the king commits genocide.

SYNOPSIS
        GENOCIDE holds a written response where the king of the netherlands confirmed
        taking note "of what i have written", proof that medicine like zyprexa, haldol, 
        abilify and clozapine are poison.
        
USAGE
        1) genocide <cmd> [mods=mod1,mod2] [-d] [-h] [-s] [-v]
        2) genocide cfg server=<server> channel=<channel> nick=<nick>
        3) genocide met <userhost>
        4) genocide rss <url>
        5) genocide ftc
        6) genocide cmd
        7) genocide mods=irc

OPTIONS
        -d              daemon mode
        -s              start a shell
        -v              be verbose
        -h              print this message
        -x              enable debug"""

import os, sys ; sys.path.insert(0, os.getcwd())

import atexit
import opl
import os
import readline
import sys
import threading
import time

# defines

wd = os.path.abspath(os.path.expanduser("~/.genocide"))

# classes

class Console(opl.hdl.Handler):

    "console class"

    def __init__(self):
        super().__init__()
        self.register("cmd", opl.hdl.cmd)

    def announce(self, txt):
        "silence announcing"
        #self.direct(txt)

    def direct(self, txt):
        print(txt)

    def input(self):
        "loop for input"
        while 1:
            try:
                e = self.poll()
            except EOFError:
                break
            self.put(e)
            e.wait()

    def poll(self):
        "wait for input"
        return opl.hdl.Command(input("> "))

    def say(self, channel, txt):
        "strip channel from output"
        self.direct(txt)

    def start(self):
        "start console"
        super().start()
        opl.thr.launch(self.input)

class Mini(opl.hdl.Handler):

    def direct(self, txt):
        print(txt)

# functions

def daemon():
    "fork to child proces"
    pid = os.fork()
    if pid != 0:
        opl.trm.termreset()
        os._exit(0)
    os.setsid()
    os.umask(0)
    si = open("/dev/null", 'r')
    so = open("/dev/null", 'a+')
    se = open("/dev/null", 'a+')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

def opcheck(ops, cfg):
    for o in ops:
        if o in cfg.opts:
             return True    
    return False

def main():
    "main function"
    cfg = opl.prs.parse_cli(wd)
    if opcheck("r", cfg):
        opl.wd = "/var/lib/opl"
        opl.utl.privileges("opl")
    if opcheck("h", cfg):
        return print(__doc__)
    if opcheck("bx", cfg):
        print("GENOCIDE %s - using the law to administer poison the king commits genocide started at %s" % (opl.__version__, time.ctime(time.time())))
    if opcheck("x", cfg):
        opl.debug = True
    h = Mini()
    h.walk("genocide", "genocide")
    if cfg.txt or opcheck("n", cfg):
        return h.cmd(cfg.otxt)
    if opcheck("d", cfg):
        daemon()
    h.start()
    for thr in h.init(cfg.sets.mods):
        if thr:
            thr.join()
    for thr in h.init(cfg.sets.mods, "genocide"):
        if thr:
            thr.join()
    if opcheck("s", cfg):
        c = Console()
        c.clone(h)
        c.start()
    if opcheck("sdw", cfg):
        h.wait()

# runtime

cmds = []
starttime = time.time()
opl.trm.console(main)
os._exit(0)
